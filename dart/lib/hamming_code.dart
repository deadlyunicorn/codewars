import "package:test/test.dart";

String encode(String text) {
  return text.runes
      .toList()
      .map(
        (int rune) => rune.toRadixString(2).padLeft(8, "0"),
      )
      .fold(
        "",
        (String previousValue, String characterBinaryRepresentation) =>
            previousValue +
            characterBinaryRepresentation
                .split('')
                .map(
                  (String binaryDigit) => binaryDigit.padRight(3, binaryDigit),
                )
                .join(''),
      );
}

String decode(String bits) {
  final List<int> decodedBits = <int>[];

  {
    final List<String> bitsList = bits.split('');
    final List<int> currrentBit = <int>[];

    for (int i = 0; i < bitsList.length;) {
      currrentBit.add(int.parse(bitsList[i]));
      i++;
      if (i % 3 == 0) {
        decodedBits.add(
          (currrentBit.fold(
                    0,
                    (int previousValue, int element) => previousValue + element,
                  ) /
                  3)
              .round(),
        );
        currrentBit.clear();
      }
    }
  }

  final List<String> res = <String>[];
  for (int i = 0; i < decodedBits.length; i += 8) {
    res.add(
      String.fromCharCode(
        int.parse(
          decodedBits.getRange(i, i + 8).join(''),
          radix: 2,
        ),
      ),
    );
  }

  return res.join('');
}

void main() {
  test("encode short word", () {
    expect(
      encode("hey"),
      equals(
        "0001111110001110000000000001111110000001110001110001111111111110000001"
        "11",
      ),
    );
  });
  test("encode longer word", () {
    expect(
      encode("The Sensei told me that i can do this kata"),
      equals(
        "0001110001110001110000000001111110001110000000000001111110000001110001"
        "1100000011100000000000000000011100011100000011111100011111100000011100"
        "0111000111111000111111111000000111111111000000111111000111111000000111"
        "0001110001111110001110000001110000001110000000000000000001111111110001"
        "1100000000011111100011111111111100011111100011111100000000011111100000"
        "0111000000000000111000000000000000000111111000111111000111000111111000"
        "0001110001110000001110000000000000000001111111110001110000000001111110"
        "0011100000000000011111100000000000011100011111111100011100000000000011"
        "1000000000000000000111111000111000000111000000111000000000000000000111"
        "1110000000001111110001111110000000000001110001111110001111111110000000"
        "0011100000000000000000011111100000011100000000011111100011111111111100"
        "0000111000000000000000000111111111000111000000000111111000111000000000"
        "0001111110001110000001110001111111110000001111110000001110000000000000"
        "0000011111100011100011111100011111100000000000011100011111111100011100"
        "0000000111111000000000000111",
      ),
    );
  });
  test("encode with numbers", () {
    expect(
      encode("T3st"),
      equals(
        "0001110001110001110000000000001111110000001111110001111111110000001111"
        "11000111111111000111000000",
      ),
    );
  });
  test("encode with special characters", () {
    expect(
      encode("T?st!%"),
      equals(
        "0001110001110001110000000000001111111111111111110001111111110000001111"
        "1100011111111100011100000000000011100000000000011100000011100000011100"
        "0111",
      ),
    );
  });
  test("decode short word", () {
    expect(
      decode(
        "1001111110001110010000100001111110000001110011110001111101101110000101"
        "11",
      ),
      equals("hey"),
    );
  });
  test("decode short word", () {
    expect(
      decode(
        "0001110001110001110001000001111110001110000010000001111110000001110001"
        "1100010011100000000000000000011100011100000011111100011111100000011100"
        "0111000111111000111111111000000111111111000000111111000110111000010111"
        "0001110001111110001110010001110000001110000000000000000001111111110001"
        "1100000000011111100011111111111100011111100011111100000000011111100000"
        "0111000001000000111000000000001000000111111000111111000111000111111000"
        "0001110001110000001110000000000000000001111111110001110000000001111110"
        "0011100000000000011111100000001000011100011111111100011100000000010011"
        "1000000000000000000111111000111000000111000000111000000000000000000111"
        "1110000000001111110001111110000000000001110001111110001111111110000000"
        "0011100000000000001000011111100000011100000000011111100011111111011100"
        "0000111000000000000000000111111111000111000000000111111000111000000000"
        "0001111110001110000001110001111111110000001111110000001110000000000000"
        "0000011111100011100011111100011111100000000000011100011111111100011100"
        "0000000111111000000000000111",
      ),
      equals("The Sensei told me that i can do this kata"),
    );
  });
  test("decode short word", () {
    expect(
      decode(
        "0001110001110001110000010000001111110000001111110001111111110000001110"
        "11000111111111000111000000",
      ),
      equals("T3st"),
    );
  });
  test("decode short word", () {
    expect(
      decode(
        "0001110001110001110000100000001111111111110111110001111111110000001111"
        "1100011110111100011100000000000011100000000000011100000011100000011100"
        "0111",
      ),
      equals("T?st!%"),
    );
  });
}
